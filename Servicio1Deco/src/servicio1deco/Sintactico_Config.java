
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 23 03:16:40 CST 2015
//----------------------------------------------------

package servicio1deco;

import java.util.Stack;
import java.util.LinkedList;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 23 03:16:40 CST 2015
  */
public class Sintactico_Config extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico_Config() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico_Config(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico_Config(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\004\000\002\052\002\000\002\002" +
    "\010\000\002\051\004\000\002\051\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\047\004\000" +
    "\002\024\005\000\002\024\004\000\002\026\004\000\002" +
    "\026\003\000\002\032\007\000\002\032\006\000\002\014" +
    "\006\000\002\014\005\000\002\033\010\000\002\033\007" +
    "\000\002\013\006\000\002\013\005\000\002\012\003\000" +
    "\002\012\006\000\002\003\004\000\002\003\002\000\002" +
    "\005\005\000\002\005\003\000\002\053\002\000\002\054" +
    "\002\000\002\034\013\000\002\055\002\000\002\056\002" +
    "\000\002\034\012\000\002\057\002\000\002\060\002\000" +
    "\002\035\015\000\002\061\002\000\002\062\002\000\002" +
    "\035\014\000\002\011\007\000\002\011\005\000\002\037" +
    "\005\000\002\037\004\000\002\004\005\000\002\004\003" +
    "\000\002\040\007\000\002\040\006\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\041\010\000\002\042\012\000\002\043\011\000\002\020" +
    "\011\000\002\020\005\000\002\020\010\000\002\063\002" +
    "\000\002\044\011\000\002\010\006\000\002\010\005\000" +
    "\002\010\006\000\002\010\005\000\002\045\004\000\002" +
    "\046\004\000\002\064\002\000\002\017\011\000\002\065" +
    "\002\000\002\022\011\000\002\066\002\000\002\023\011" +
    "\000\002\067\002\000\002\021\005\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\016\003\000\002\016\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\007\003\000\002\007\003\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\015\005\000\002" +
    "\015\005\000\002\070\002\000\002\015\006\000\002\015" +
    "\004\000\002\015\005\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\004\043\005\001\002\000\004\002\316\001" +
    "\002\000\004\053\006\001\002\000\004\010\000\001\002" +
    "\000\004\010\010\001\002\000\012\006\uffe9\011\uffe9\044" +
    "\uffe9\045\uffe9\001\002\000\012\006\023\011\022\044\016" +
    "\045\017\001\002\000\012\002\ufffd\006\ufffd\011\ufffd\044" +
    "\ufffd\001\002\000\014\006\uffea\011\uffea\044\uffea\045\uffea" +
    "\047\uffea\001\002\000\012\002\ufffb\006\ufffb\011\ufffb\044" +
    "\ufffb\001\002\000\012\002\ufffa\006\ufffa\011\ufffa\044\ufffa" +
    "\001\002\000\004\053\301\001\002\000\014\020\223\021" +
    "\220\022\224\024\221\053\253\001\002\000\012\002\uffff" +
    "\006\023\011\022\044\016\001\002\000\012\002\ufffc\006" +
    "\ufffc\011\ufffc\044\ufffc\001\002\000\012\020\223\021\220" +
    "\022\224\024\221\001\002\000\004\047\024\001\002\000" +
    "\026\025\037\026\050\027\030\030\041\035\033\036\043" +
    "\037\054\041\034\050\036\053\042\001\002\000\012\002" +
    "\ufff9\006\ufff9\011\ufff9\044\ufff9\001\002\000\026\025\uffb5" +
    "\026\uffb5\027\uffb5\030\uffb5\035\uffb5\036\uffb5\037\uffb5\041" +
    "\uffb5\050\uffb5\053\uffb5\001\002\000\026\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\035\uffb4\036\uffb4\037\uffb4\041\uffb4\050" +
    "\uffb4\053\uffb4\001\002\000\004\007\217\001\002\000\026" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\035\uffb0\036\uffb0\037" +
    "\uffb0\041\uffb0\050\uffb0\053\uffb0\001\002\000\026\025\uffae" +
    "\026\uffae\027\uffae\030\uffae\035\uffae\036\uffae\037\uffae\041" +
    "\uffae\050\uffae\053\uffae\001\002\000\004\016\uffc0\001\002" +
    "\000\004\047\uffba\001\002\000\026\025\ufff5\026\ufff5\027" +
    "\ufff5\030\ufff5\035\ufff5\036\ufff5\037\ufff5\041\ufff5\050\ufff5" +
    "\053\ufff5\001\002\000\040\002\ufff7\006\ufff7\011\ufff7\025" +
    "\ufff7\026\ufff7\027\ufff7\030\ufff7\035\ufff7\036\ufff7\037\ufff7" +
    "\040\ufff7\041\ufff7\044\ufff7\050\ufff7\053\ufff7\001\002\000" +
    "\020\007\205\016\062\052\067\053\070\060\061\061\066" +
    "\073\072\001\002\000\026\025\037\026\050\027\030\030" +
    "\041\035\033\036\043\037\054\041\034\050\203\053\042" +
    "\001\002\000\004\016\175\001\002\000\010\012\160\016" +
    "\134\051\161\001\002\000\004\047\uffbe\001\002\000\026" +
    "\025\uffb1\026\uffb1\027\uffb1\030\uffb1\035\uffb1\036\uffb1\037" +
    "\uffb1\041\uffb1\050\uffb1\053\uffb1\001\002\000\026\025\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\035\uffb6\036\uffb6\037\uffb6\041" +
    "\uffb6\050\uffb6\053\uffb6\001\002\000\026\025\uffb7\026\uffb7" +
    "\027\uffb7\030\uffb7\035\uffb7\036\uffb7\037\uffb7\041\uffb7\050" +
    "\uffb7\053\uffb7\001\002\000\026\025\uffb8\026\uffb8\027\uffb8" +
    "\030\uffb8\035\uffb8\036\uffb8\037\uffb8\041\uffb8\050\uffb8\053" +
    "\uffb8\001\002\000\004\007\151\001\002\000\026\025\uffb3" +
    "\026\uffb3\027\uffb3\030\uffb3\035\uffb3\036\uffb3\037\uffb3\041" +
    "\uffb3\050\uffb3\053\uffb3\001\002\000\026\025\uffb2\026\uffb2" +
    "\027\uffb2\030\uffb2\035\uffb2\036\uffb2\037\uffb2\041\uffb2\050" +
    "\uffb2\053\uffb2\001\002\000\026\025\uffaf\026\uffaf\027\uffaf" +
    "\030\uffaf\035\uffaf\036\uffaf\037\uffaf\041\uffaf\050\uffaf\053" +
    "\uffaf\001\002\000\004\047\uffbc\001\002\000\004\047\024" +
    "\001\002\000\004\040\057\001\002\000\004\016\060\001" +
    "\002\000\016\016\062\052\067\053\070\060\061\061\066" +
    "\073\072\001\002\000\014\007\uffa3\017\uffa3\070\uffa3\071" +
    "\uffa3\072\uffa3\001\002\000\016\016\062\052\067\053\070" +
    "\060\061\061\066\073\072\001\002\000\014\007\uff95\017" +
    "\uff95\070\uff95\071\uff95\072\uff95\001\002\000\004\017\145" +
    "\001\002\000\046\004\uffa9\005\uffa9\007\uffa9\013\uffa9\017" +
    "\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\062\uffa9\063\uffa9" +
    "\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072" +
    "\uffa9\001\002\000\014\007\uffa2\017\uffa2\070\uffa2\071\uffa2" +
    "\072\uffa2\001\002\000\046\004\uffab\005\uffab\007\uffab\013" +
    "\uffab\017\uffab\054\uffab\055\uffab\056\uffab\057\uffab\062\uffab" +
    "\063\uffab\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071" +
    "\uffab\072\uffab\001\002\000\050\004\uffaa\005\uffaa\007\uffaa" +
    "\013\uffaa\016\134\017\uffaa\054\uffaa\055\uffaa\056\uffaa\057" +
    "\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa" +
    "\070\uffaa\071\uffaa\072\uffaa\001\002\000\014\007\uffac\017" +
    "\uffac\070\125\071\127\072\126\001\002\000\016\016\062" +
    "\052\067\053\070\060\061\061\066\073\072\001\002\000" +
    "\032\007\uffad\017\uffad\054\101\055\075\056\077\057\104" +
    "\062\105\063\100\064\103\065\102\066\076\067\074\001" +
    "\002\000\010\016\106\052\067\053\070\001\002\000\010" +
    "\016\106\052\067\053\070\001\002\000\010\016\106\052" +
    "\067\053\070\001\002\000\010\016\106\052\067\053\070" +
    "\001\002\000\010\016\106\052\067\053\070\001\002\000" +
    "\010\016\106\052\067\053\070\001\002\000\010\016\106" +
    "\052\067\053\070\001\002\000\010\016\106\052\067\053" +
    "\070\001\002\000\010\016\106\052\067\053\070\001\002" +
    "\000\010\016\106\052\067\053\070\001\002\000\010\016" +
    "\106\052\067\053\070\001\002\000\024\007\uffa1\017\uffa1" +
    "\054\101\055\075\056\077\057\104\070\uffa1\071\uffa1\072" +
    "\uffa1\001\002\000\014\017\111\054\101\055\075\056\077" +
    "\057\104\001\002\000\046\004\uffa8\005\uffa8\007\uffa8\013" +
    "\uffa8\017\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\062\uffa8" +
    "\063\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071" +
    "\uffa8\072\uffa8\001\002\000\046\004\uffa4\005\uffa4\007\uffa4" +
    "\013\uffa4\017\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\062" +
    "\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\070\uffa4" +
    "\071\uffa4\072\uffa4\001\002\000\024\007\uff9f\017\uff9f\054" +
    "\101\055\075\056\077\057\104\070\uff9f\071\uff9f\072\uff9f" +
    "\001\002\000\024\007\uff9e\017\uff9e\054\101\055\075\056" +
    "\077\057\104\070\uff9e\071\uff9e\072\uff9e\001\002\000\046" +
    "\004\uffa7\005\uffa7\007\uffa7\013\uffa7\017\uffa7\054\uffa7\055" +
    "\uffa7\056\077\057\104\062\uffa7\063\uffa7\064\uffa7\065\uffa7" +
    "\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\001\002\000" +
    "\024\007\uffa0\017\uffa0\054\101\055\075\056\077\057\104" +
    "\070\uffa0\071\uffa0\072\uffa0\001\002\000\046\004\uffa5\005" +
    "\uffa5\007\uffa5\013\uffa5\017\uffa5\054\uffa5\055\uffa5\056\uffa5" +
    "\057\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\067" +
    "\uffa5\070\uffa5\071\uffa5\072\uffa5\001\002\000\024\007\uff9d" +
    "\017\uff9d\054\101\055\075\056\077\057\104\070\uff9d\071" +
    "\uff9d\072\uff9d\001\002\000\046\004\uffa6\005\uffa6\007\uffa6" +
    "\013\uffa6\017\uffa6\054\uffa6\055\uffa6\056\077\057\104\062" +
    "\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6" +
    "\071\uffa6\072\uffa6\001\002\000\024\007\uff9c\017\uff9c\054" +
    "\101\055\075\056\077\057\104\070\uff9c\071\uff9c\072\uff9c" +
    "\001\002\000\014\007\uff97\017\uff97\070\uff97\071\uff97\072" +
    "\uff97\001\002\000\026\054\101\055\075\056\077\057\104" +
    "\062\105\063\100\064\103\065\102\066\076\067\074\001" +
    "\002\000\016\016\062\052\067\053\070\060\061\061\066" +
    "\073\072\001\002\000\016\016\uff99\052\uff99\053\uff99\060" +
    "\uff99\061\uff99\073\uff99\001\002\000\016\016\062\052\067" +
    "\053\070\060\061\061\066\073\072\001\002\000\014\007" +
    "\uff9a\017\uff9a\070\125\071\uff9a\072\126\001\002\000\016" +
    "\016\062\052\067\053\070\060\061\061\066\073\072\001" +
    "\002\000\014\007\uff98\017\uff98\070\125\071\uff98\072\uff98" +
    "\001\002\000\014\007\uff9b\017\uff9b\070\uff9b\071\uff9b\072" +
    "\uff9b\001\002\000\012\016\106\017\135\052\067\053\070" +
    "\001\002\000\004\007\144\001\002\000\016\004\uffd5\017" +
    "\uffd5\054\101\055\075\056\077\057\104\001\002\000\006" +
    "\004\140\017\141\001\002\000\010\016\106\052\067\053" +
    "\070\001\002\000\004\007\142\001\002\000\072\004\uffd4" +
    "\005\uffd4\007\uffd4\013\uffd4\017\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\035\uffd4\036\uffd4\037\uffd4\041\uffd4\050\uffd4" +
    "\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\062\uffd4\063" +
    "\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4" +
    "\072\uffd4\001\002\000\016\004\uffd6\017\uffd6\054\101\055" +
    "\075\056\077\057\104\001\002\000\072\004\uffd3\005\uffd3" +
    "\007\uffd3\013\uffd3\017\uffd3\025\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\041\uffd3\050\uffd3\053\uffd3" +
    "\054\uffd3\055\uffd3\056\uffd3\057\uffd3\062\uffd3\063\uffd3\064" +
    "\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3" +
    "\001\002\000\026\025\uffbb\026\uffbb\027\uffbb\030\uffbb\035" +
    "\uffbb\036\uffbb\037\uffbb\041\uffbb\050\uffbb\053\uffbb\001\002" +
    "\000\012\017\150\070\125\071\127\072\126\001\002\000" +
    "\030\017\111\054\101\055\075\056\077\057\104\062\105" +
    "\063\100\064\103\065\102\066\076\067\074\001\002\000" +
    "\014\007\uff96\017\uff96\070\uff96\071\uff96\072\uff96\001\002" +
    "\000\026\025\uffc2\026\uffc2\027\uffc2\030\uffc2\035\uffc2\036" +
    "\uffc2\037\uffc2\041\uffc2\050\uffc2\053\uffc2\001\002\000\004" +
    "\047\024\001\002\000\004\035\154\001\002\000\004\016" +
    "\155\001\002\000\016\016\062\052\067\053\070\060\061" +
    "\061\066\073\072\001\002\000\004\017\157\001\002\000" +
    "\026\025\uffbd\026\uffbd\027\uffbd\030\uffbd\035\uffbd\036\uffbd" +
    "\037\uffbd\041\uffbd\050\uffbd\053\uffbd\001\002\000\010\016" +
    "\106\052\067\053\070\001\002\000\016\016\062\052\067" +
    "\053\070\060\061\061\066\073\072\001\002\000\006\012" +
    "\163\051\164\001\002\000\010\016\106\052\067\053\070" +
    "\001\002\000\016\016\062\052\067\053\070\060\061\061" +
    "\066\073\072\001\002\000\004\007\166\001\002\000\026" +
    "\025\ufff4\026\ufff4\027\ufff4\030\ufff4\035\ufff4\036\ufff4\037" +
    "\ufff4\041\ufff4\050\ufff4\053\ufff4\001\002\000\014\013\170" +
    "\054\101\055\075\056\077\057\104\001\002\000\006\012" +
    "\ufff2\051\ufff2\001\002\000\004\007\172\001\002\000\026" +
    "\025\ufff3\026\ufff3\027\ufff3\030\ufff3\035\ufff3\036\ufff3\037" +
    "\ufff3\041\ufff3\050\ufff3\053\ufff3\001\002\000\014\013\174" +
    "\054\101\055\075\056\077\057\104\001\002\000\006\012" +
    "\ufff1\051\ufff1\001\002\000\016\016\062\052\067\053\070" +
    "\060\061\061\066\073\072\001\002\000\004\017\177\001" +
    "\002\000\004\031\200\001\002\000\004\047\024\001\002" +
    "\000\026\025\uffce\026\uffce\027\uffce\030\uffce\035\uffce\036" +
    "\uffce\037\uffce\041\uffce\050\uffce\053\uffce\001\002\000\026" +
    "\025\ufff6\026\ufff6\027\ufff6\030\ufff6\035\ufff6\036\ufff6\037" +
    "\ufff6\041\ufff6\050\ufff6\053\ufff6\001\002\000\040\002\ufff8" +
    "\006\ufff8\011\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\035" +
    "\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\044\ufff8\050\ufff8" +
    "\053\ufff8\001\002\000\004\007\206\001\002\000\026\025" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\035\uffd7\036\uffd7\037\uffd7" +
    "\041\uffd7\050\uffd7\053\uffd7\001\002\000\026\025\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\035\uffd8\036\uffd8\037\uffd8\041\uffd8" +
    "\050\uffd8\053\uffd8\001\002\000\004\047\024\001\002\000" +
    "\026\025\uffb9\026\uffb9\027\uffb9\030\uffb9\035\uffb9\036\uffb9" +
    "\037\uffb9\041\uffb9\050\uffb9\053\uffb9\001\002\000\004\016" +
    "\212\001\002\000\016\016\062\052\067\053\070\060\061" +
    "\061\066\073\072\001\002\000\004\017\214\001\002\000" +
    "\004\036\215\001\002\000\004\047\024\001\002\000\026" +
    "\025\uffbf\026\uffbf\027\uffbf\030\uffbf\035\uffbf\036\uffbf\037" +
    "\uffbf\041\uffbf\050\uffbf\053\uffbf\001\002\000\026\025\uffc1" +
    "\026\uffc1\027\uffc1\030\uffc1\035\uffc1\036\uffc1\037\uffc1\041" +
    "\uffc1\050\uffc1\053\uffc1\001\002\000\006\010\uffd1\012\uffd1" +
    "\001\002\000\006\010\uffcf\012\uffcf\001\002\000\004\010" +
    "\225\001\002\000\006\010\uffd2\012\uffd2\001\002\000\006" +
    "\010\uffd0\012\uffd0\001\002\000\004\053\226\001\002\000" +
    "\004\016\227\001\002\000\014\017\230\020\uffe0\021\uffe0" +
    "\022\uffe0\024\uffe0\001\002\000\006\045\uffdd\047\uffdd\001" +
    "\002\000\012\020\223\021\220\022\224\024\221\001\002" +
    "\000\006\004\236\017\237\001\002\000\004\010\234\001" +
    "\002\000\004\053\235\001\002\000\006\004\uffd9\017\uffd9" +
    "\001\002\000\012\020\223\021\220\022\224\024\221\001" +
    "\002\000\006\045\uffe9\047\uffe9\001\002\000\006\045\017" +
    "\047\uffdf\001\002\000\004\047\024\001\002\000\012\002" +
    "\uffde\006\uffde\011\uffde\044\uffde\001\002\000\004\010\244" +
    "\001\002\000\004\053\245\001\002\000\006\004\uffda\017" +
    "\uffda\001\002\000\006\045\uffe9\047\uffe9\001\002\000\006" +
    "\045\017\047\uffdc\001\002\000\004\047\024\001\002\000" +
    "\012\002\uffdb\006\uffdb\011\uffdb\044\uffdb\001\002\000\012" +
    "\002\ufffe\006\ufffe\011\ufffe\044\ufffe\001\002\000\004\042" +
    "\263\001\002\000\004\010\255\001\002\000\004\053\256" +
    "\001\002\000\006\004\uffe7\007\uffe7\001\002\000\006\004" +
    "\260\007\261\001\002\000\004\053\262\001\002\000\014" +
    "\006\uffef\011\uffef\044\uffef\045\uffef\047\uffef\001\002\000" +
    "\006\004\uffe8\007\uffe8\001\002\000\012\020\223\021\220" +
    "\022\224\024\221\001\002\000\004\012\266\001\002\000" +
    "\006\007\276\012\275\001\002\000\010\016\106\052\067" +
    "\053\070\001\002\000\004\013\274\001\002\000\016\005" +
    "\271\013\uffec\054\101\055\075\056\077\057\104\001\002" +
    "\000\004\005\272\001\002\000\010\016\106\052\067\053" +
    "\070\001\002\000\014\013\uffeb\054\101\055\075\056\077" +
    "\057\104\001\002\000\006\007\uffed\012\uffed\001\002\000" +
    "\010\016\106\052\067\053\070\001\002\000\014\006\ufff0" +
    "\011\ufff0\044\ufff0\045\ufff0\047\ufff0\001\002\000\004\013" +
    "\300\001\002\000\006\007\uffee\012\uffee\001\002\000\004" +
    "\016\302\001\002\000\014\017\304\020\uffe6\021\uffe6\022" +
    "\uffe6\024\uffe6\001\002\000\012\020\223\021\220\022\224" +
    "\024\221\001\002\000\006\045\uffe3\047\uffe3\001\002\000" +
    "\006\045\uffe9\047\uffe9\001\002\000\006\045\017\047\uffe2" +
    "\001\002\000\004\047\024\001\002\000\012\002\uffe1\006" +
    "\uffe1\011\uffe1\044\uffe1\001\002\000\006\004\236\017\312" +
    "\001\002\000\006\045\uffe9\047\uffe9\001\002\000\006\045" +
    "\017\047\uffe5\001\002\000\004\047\024\001\002\000\012" +
    "\002\uffe4\006\uffe4\011\uffe4\044\uffe4\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\006\001\001\000\002\001\001" +
    "\000\004\003\010\001\001\000\016\033\012\034\020\035" +
    "\013\047\014\050\011\051\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\253\001\001\000\012\034\020" +
    "\035\013\047\014\050\251\001\001\000\002\001\001\000" +
    "\004\036\221\001\001\000\004\024\024\001\001\000\034" +
    "\017\050\021\043\022\051\023\030\025\034\026\037\031" +
    "\046\032\044\037\045\040\025\041\026\045\031\046\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\064\210\001\001\000\004\067\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\006\072\007\062" +
    "\015\070\016\203\040\064\001\001\000\032\017\050\021" +
    "\043\022\051\023\030\025\201\031\046\032\044\037\045" +
    "\040\025\041\026\045\031\046\052\001\001\000\002\001" +
    "\001\000\004\014\161\001\001\000\004\065\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\066\054\001\001\000" +
    "\004\024\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\006\072\007\062\015\070\016\063\040\064\001" +
    "\001\000\002\001\001\000\012\006\146\007\062\015\145" +
    "\040\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\123\007\062\015" +
    "\122\040\064\001\001\000\002\001\001\000\006\006\121" +
    "\040\064\001\001\000\006\006\120\040\064\001\001\000" +
    "\006\006\117\040\064\001\001\000\006\006\116\040\064" +
    "\001\001\000\006\006\115\040\064\001\001\000\006\006" +
    "\114\040\064\001\001\000\006\006\113\040\064\001\001" +
    "\000\006\006\112\040\064\001\001\000\006\006\111\040" +
    "\064\001\001\000\006\006\106\040\064\001\001\000\006" +
    "\006\107\040\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\123\007\062\015\132\040\064\001\001\000\004\070\130" +
    "\001\001\000\012\006\123\007\062\015\127\040\064\001" +
    "\001\000\002\001\001\000\012\006\123\007\062\015\131" +
    "\040\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\136\006\135\040\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\142\040" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\072\007\062\015\070\016\155\040\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\172\040\064\001\001\000\014\006\072\007\062\015\070" +
    "\016\170\040\064\001\001\000\002\001\001\000\006\006" +
    "\166\040\064\001\001\000\014\006\072\007\062\015\070" +
    "\016\164\040\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\072\007\062\015\070\016\175\040\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\006\072\007\062\015\070\016\212\040\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\230\001\001\000\004\061\245\001\001\000\006" +
    "\011\231\036\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\242" +
    "\001\001\000\004\003\237\001\001\000\006\033\012\060" +
    "\240\001\001\000\004\024\241\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\246\001\001\000\006\033\012\062\247\001\001" +
    "\000\004\024\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\256" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\263" +
    "\001\001\000\004\013\264\001\001\000\002\001\001\000" +
    "\010\006\267\012\266\040\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\272\040" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\267\012\276\040\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\302\001\001\000\006\011\310\036\232\001\001\000" +
    "\004\055\304\001\001\000\004\003\305\001\001\000\006" +
    "\033\012\056\306\001\001\000\004\024\307\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\312\001\001" +
    "\000\006\033\012\054\313\001\001\000\004\024\314\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico_Config$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico_Config$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico_Config$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





	
    public void report_error(String message, Object info) {
       	StringBuffer m = new StringBuffer("Error");
		System.out.println("Mensaje: "+message);
		System.out.println("info: "+info.toString());
		if(info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s=((java_cup.runtime.Symbol)info);
			/* Comprueba si el numero de línea es mayor o igual que cero */
			if(s.left >= 0) {
				m.append(" en linea "+(s.left+1));
				/*Comprueba si el numero de columna es mayoro igual que cero */
				if (s.right >= 0)
					m.append(", y columna "+(s.right+1));
			}
		}
		m.append(" : "+message);
		System.err.println(m);
    }
    public void report_fatal_error(String message, Object info) {
       	report_error(message, info);
		System.exit(1);
    }
 

 

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico_Config$actions {


public Stack<String> Lbreak=new Stack<String>();
public Stack<String> Lcontinue=new Stack<String>();
public LinkedList<Simbolo> Tabla_Simbolos=new LinkedList<Simbolo>();
public int tmp=1;int l=1;int pos=0;String amb="global";
public String salida="";String nombreprograma="";
public Logica LogXor;
public class Logica
{
	String Verdaderas , Falsas , texto;
	Logica(String v , String f , String t)
	{
		Verdaderas=v;Falsas=f;texto=t;
	}
	Logica(){Verdaderas="";Falsas="";texto="";}
}
public class Simbolo
{
	String id;int pos;String ambito="";String rol="";String tipo;String valor;
	int dim;public LinkedList<Integer> inferiores=new LinkedList<Integer>();public LinkedList<Integer> superiores= new LinkedList<Integer>();
	int tam=1;Stack<Simbolo> Parametros=new Stack<Simbolo>();
	public Simbolo(String n,int p, String a,String r,String t, String v)
	{
		id=n;pos=p;ambito=a;rol=r;tipo=t;valor=v;
	}
	public Simbolo(){}
}
public int BuscarSimbolo(String id)
	{
		for(int i=0; i<Tabla_Simbolos.size();i++)
		{
			Simbolo tmp=Tabla_Simbolos.get(i);
			if(tmp.id.equals(id)&&!tmp.ambito.equals("global"))
			{
				return tmp.pos;
			}
			else if(tmp.id.equals(id))
			{
				return -2;
			}
		}
		return -1;
	}
public Simbolo SeekSym(String id)
{
	for(int i=0; i<Tabla_Simbolos.size();i++)
		{
			Simbolo tmp=Tabla_Simbolos.get(i);
			if(tmp.id.equals(id))
			{
				return tmp;
			}
		}
		return new Simbolo();
}

  private final Sintactico_Config parser;

  /** Constructor */
  CUP$Sintactico_Config$actions(Sintactico_Config parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico_Config$do_action(
    int                        CUP$Sintactico_Config$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_Config$parser,
    java.util.Stack            CUP$Sintactico_Config$stack,
    int                        CUP$Sintactico_Config$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico_Config$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico_Config$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ExpLog ::= ExpRel 
            {
              Logica RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
      		String tt="if("+v1+") goto L"+l+"\n";
      		tt+="goto L"+(l+1);
      		String tv="L"+l+":";
      		String tf="L"+(l+1)+":";
      		l=l+2;RESULT=new Logica(tv,tf,tt);
      		if(LogXor!=null)
      		{
      			String tt1="if("+v1+") goto L"+l+"\n";
      			tt1+="goto L"+(l+1);
      			String tv1="L"+l+":";
      			String tf1="L"+(l+1)+":";
      			l=l+2;LogXor=new Logica(tv1,tf1,tt1);
      		}
      	
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("ExpLog",11, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ExpLog ::= PA ExpLog PC 
            {
              Logica RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).right;
		Logica v1 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).value;
		RESULT=v1;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("ExpLog",11, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ExpLog ::= NOT ExpLog 
            {
              Logica RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		Logica v1 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=new Logica(v1.Falsas,v1.Verdaderas,v1.texto);
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("ExpLog",11, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ExpLog ::= ExpLog XOR NT$14 ExpLog 
            {
              Logica RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Logica) ((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).right;
		Logica v1 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		Logica v2 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
      		String tt=v1.texto+"\n"+v1.Verdaderas+"\n"+v2.texto+"\n";
      		tt+=v1.Falsas+"\n"+LogXor.texto+"\n";
      		String tv=v2.Falsas+LogXor.Verdaderas;
      		String tf= LogXor.Falsas+v2.Verdaderas;
      		RESULT=new Logica(tv,tf,tt);
      		LogXor=null;
      
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("ExpLog",11, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$14 ::= 
            {
              Logica RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).right;
		Logica v1 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).value;
LogXor=new Logica();
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("NT$14",54, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ExpLog ::= ExpLog OR ExpLog 
            {
              Logica RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).right;
		Logica v1 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		Logica v2 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
      		String tt=v1.texto+"\n"+v1.Falsas+"\n"+v2.texto+"\n";
      		String tv=v1.Verdaderas+v2.Verdaderas;
      		String tf= v2.Falsas;
      		RESULT=new Logica(tv,tf,tt);
      
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("ExpLog",11, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ExpLog ::= ExpLog AND ExpLog 
            {
              Logica RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).right;
		Logica v1 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		Logica v2 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
      		String tt=v1.texto+"\n"+v1.Verdaderas+"\n"+v2.texto+"\n";
      		String tv=v2.Verdaderas;
      		String tf= v1.Falsas+v2.Falsas;
      		RESULT=new Logica(tv,tf,tt);
      
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("ExpLog",11, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ExpRel ::= E MENORIGUAL E 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
      	salida+="t"+tmp+"="+v1+"<="+v2+"\n";
      	RESULT="t"+tmp;tmp++;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("ExpRel",5, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ExpRel ::= E MENOR E 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
      	salida+="t"+tmp+"="+v1+"<"+v2+"\n";
      	RESULT="t"+tmp;tmp++;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("ExpRel",5, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ExpRel ::= E MAYORIGUAL E 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
      	salida+="t"+tmp+"="+v1+">="+v2+"\n";
      	RESULT="t"+tmp;tmp++;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("ExpRel",5, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ExpRel ::= E MAYOR E 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
      	salida+="t"+tmp+"="+v1+">"+v2+"\n";
      	RESULT="t"+tmp;tmp++;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("ExpRel",5, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ExpRel ::= E DIF E 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
      	salida+="t"+tmp+"="+v1+"!="+v2+"\n";
      	RESULT="t"+tmp;tmp++;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("ExpRel",5, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ExpRel ::= E IGUALIGUAL E 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
      	salida+="t"+tmp+"="+v1+"=="+v2+"\n";
      	RESULT="t"+tmp;tmp++;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("ExpRel",5, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ExpRel ::= TFALSE 
            {
              String RESULT =null;
		RESULT="0";
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("ExpRel",5, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ExpRel ::= TTRUE 
            {
              String RESULT =null;
		RESULT="1";
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("ExpRel",5, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E ::= E DIV E 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
      	salida+="t"+tmp+"="+v1+"/"+v2+"\n";
      	RESULT="t"+tmp;tmp++;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E ::= E POR E 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
      	salida+="t"+tmp+"="+v1+"*"+v2+"\n";
      	RESULT="t"+tmp;tmp++;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E ::= E MENOS E 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
      	salida+="t"+tmp+"="+v1+"-"+v2+"\n";
      	RESULT="t"+tmp;tmp++;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E ::= E MAS E 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
      	salida+="t"+tmp+"="+v1+"+"+v2+"\n";
      	RESULT="t"+tmp;tmp++;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E ::= PA E PC 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).value;
		RESULT=v1;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E ::= LLAMADA 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
      	salida+=v1+"\n";
      	salida+="t"+tmp+"=P+"+pos+"\nt"+(tmp+1)+"=Stack[t"+tmp+"]\n";tmp=tmp+2;
      	RESULT="t"+(tmp-1);
      	//System.out.println("-------\n"+salida+RESULT+"\n--------------");
      	
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E ::= ID 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
      	int a=BuscarSimbolo(v1);
				if(a>-1)
				{
					salida+="t"+tmp+"=P+"+a+"\n";
					salida+="t"+(tmp+1)+"=Stack[t"+tmp+"]\n";tmp++;
					RESULT="t"+tmp;tmp++;
				}
				else if(a==-2)
				{
					RESULT=v1;
				}
      	
      
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E ::= NUMERO 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=v1;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Exp ::= ExpLog 
            {
              Logica RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		Logica v1 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=v1;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("Exp",12, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Exp ::= E 
            {
              Logica RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=new Logica();RESULT.texto=v1;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("Exp",12, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIAFLUJO ::= SENTBREAK 
            {
              String RESULT =null;
		int v7left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v7right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v7 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=v7;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("SENTENCIAFLUJO",23, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIAFLUJO ::= SENTCONTINUE 
            {
              String RESULT =null;
		int v6left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v6right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v6 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=v6;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("SENTENCIAFLUJO",23, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIAFLUJO ::= SENTREPEAT 
            {
              String RESULT =null;
		int v5left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v5right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		Logica v5 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;

              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("SENTENCIAFLUJO",23, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIAFLUJO ::= SENTLOOP 
            {
              String RESULT =null;
		int v4left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		Logica v4 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;

              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("SENTENCIAFLUJO",23, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIAFLUJO ::= SENTDOWHILE 
            {
              String RESULT =null;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		Logica v3 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;

              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("SENTENCIAFLUJO",23, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIAFLUJO ::= SENTWHILE 
            {
              String RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		Logica v2 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=v2.texto;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("SENTENCIAFLUJO",23, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIAFLUJO ::= SENTIF 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=v1;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("SENTENCIAFLUJO",23, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA ::= LLAMADA 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=v1;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("SENTENCIA",19, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA ::= ASIGNACION 
            {
              String RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=v2;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("SENTENCIA",19, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA ::= SENTRET 
            {
              String RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=v2;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("SENTENCIA",19, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA ::= SENTENCIAFLUJO 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=v1;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("SENTENCIA",19, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTLOOP ::= LOOP NT$13 BLOQUE 
            {
              Logica RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Logica) ((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
		RESULT.texto+=salida;salida="";
		RESULT.texto+=v1;
		RESULT.texto+="\ngoto "+RESULT.Verdaderas+"\n"+RESULT.Falsas+":\n";
		System.out.println(RESULT.texto);
		Lbreak.pop();Lcontinue.pop();
		
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("SENTLOOP",15, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$13 ::= 
            {
              Logica RESULT =null;
RESULT=new Logica();RESULT.texto="L"+l+":\n";
	RESULT.Verdaderas="L"+l;l++;
	Lcontinue.push("goto "+RESULT.Verdaderas);
	RESULT.Falsas="L"+l;l++;
	Lbreak.push("goto "+RESULT.Falsas);
	
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("NT$13",53, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTREPEAT ::= REPEAT NT$12 BLOQUE UNTIL PA Exp PC 
            {
              Logica RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Logica) ((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-5)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).right;
		Logica v2 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).value;
		
	RESULT.texto+=salida;salida="";
	RESULT.texto+=v1+"\n"+v2.texto+"\n";
	RESULT.texto+=v2.Falsas+"\ngoto "+RESULT.Verdaderas+"\n"+v2.Verdaderas+RESULT.Falsas+":\n";
	//System.out.println(RESULT.texto);
	
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("SENTREPEAT",17, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$12 ::= 
            {
              Logica RESULT =null;

	RESULT=new Logica();RESULT.texto="L"+l+":\n";
	RESULT.Verdaderas="L"+l;l++;
	Lcontinue.push("goto "+RESULT.Verdaderas);
	RESULT.Falsas="L"+l;l++;
	Lbreak.push("goto "+RESULT.Falsas);
	
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("NT$12",52, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTDOWHILE ::= DO NT$11 BLOQUE WHILE PA Exp PC 
            {
              Logica RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Logica) ((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-5)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).right;
		Logica v2 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).value;
		
	RESULT.texto+=salida;salida="";
	RESULT.texto+=v1+"\n"+v2.texto+"\n";
	RESULT.texto+=v2.Verdaderas+"\ngoto "+RESULT.Verdaderas+"\n"+v2.Falsas+RESULT.Falsas+":\n";
	//System.out.println(RESULT.texto);
	
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("SENTDOWHILE",16, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$11 ::= 
            {
              Logica RESULT =null;

	RESULT=new Logica();RESULT.texto="L"+l+":\n";
	RESULT.Verdaderas="L"+l;l++;
	Lcontinue.push("goto "+RESULT.Verdaderas);
	RESULT.Falsas="L"+l;l++;
	Lbreak.push("goto "+RESULT.Falsas);
	
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("NT$11",51, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTWHILE ::= WHILE NT$10 PA Exp PC DO BLOQUE 
            {
              Logica RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Logica) ((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-5)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).right;
		Logica v1 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
	RESULT.texto+=salida;salida="";
	RESULT.texto+=v1.texto+"\n"+v1.Verdaderas+"\n";
	RESULT.texto+=v2+"\ngoto "+RESULT.Verdaderas+"\n"+v1.Falsas+RESULT.Falsas+":\n";
	//System.out.println(RESULT.texto);
	
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("SENTWHILE",13, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$10 ::= 
            {
              Logica RESULT =null;

	RESULT=new Logica();RESULT.texto="L"+l+":\n";
	RESULT.Verdaderas="L"+l;l++;
	Lcontinue.push("goto "+RESULT.Verdaderas);
	RESULT.Falsas="L"+l;l++;
	Lbreak.push("goto "+RESULT.Falsas);

              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("NT$10",50, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTCONTINUE ::= CONTINUE PUNTOCOMA 
            {
              String RESULT =null;
		RESULT=Lcontinue.pop();Lcontinue.push(RESULT);
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("SENTCONTINUE",36, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTBREAK ::= BREAK PUNTOCOMA 
            {
              String RESULT =null;
		RESULT=Lbreak.pop();Lbreak.push(RESULT);
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("SENTBREAK",35, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LISTCASE ::= ELSE DOSPUNTOS BLOQUE 
            {
              Stack<Logica> RESULT =null;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=new Stack<Logica>();
	Logica a=new Logica(); a.Falsas="1"; a.texto=v3;RESULT.push(a);

              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("LISTCASE",6, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LISTCASE ::= LISTCASE ELSE DOSPUNTOS BLOQUE 
            {
              Stack<Logica> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).right;
		Stack<Logica> v1 = (Stack<Logica>)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=v1;
	Logica a=new Logica(); a.Falsas="1"; a.texto=v3;RESULT.push(a);

              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("LISTCASE",6, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LISTCASE ::= E DOSPUNTOS BLOQUE 
            {
              Stack<Logica> RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=new Stack<Logica>();
	Logica a=new Logica(); a.Verdaderas=v2; a.texto=v3;RESULT.push(a);

              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("LISTCASE",6, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LISTCASE ::= LISTCASE E DOSPUNTOS BLOQUE 
            {
              Stack<Logica> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).right;
		Stack<Logica> v1 = (Stack<Logica>)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=v1;
	Logica a=new Logica(); a.Verdaderas=v2; a.texto=v3;RESULT.push(a);

              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("LISTCASE",6, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTCASE ::= SELECT NT$9 CASE E OF LISTCASE END 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-5)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).right;
		Stack<Logica> v2 = (Stack<Logica>)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).value;
		
	
	String condiciones="";
	String bloques="";
	while(!v2.empty())
	{
		Logica tmp=v2.pop();
		if(tmp.Falsas.equals("1"))
		{
			condiciones+="if (1) goto L"+l+"\n";
			bloques+="L"+l+":\n"+tmp.texto+"\n";l++;
		}
		else 
		{
			condiciones+="if ("+v1+"=="+tmp.Verdaderas+") goto L"+l+"\n";
			bloques+="L"+l+":\n"+tmp.texto+"\n";l++;
		}
		
	}
	RESULT=condiciones+""+bloques+"\n"+RESULT;
	Lbreak.pop();
	//System.out.println(RESULT);
	
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("SENTCASE",34, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$9 ::= 
            {
              String RESULT =null;
RESULT="L"+l+":\n";Lbreak.push("goto L"+l);l++;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("NT$9",49, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LISTELSE ::= ELSEIF PA Exp PC THEN BLOQUE 
            {
              Logica RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).right;
		Logica v1 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=new Logica();
				RESULT.texto=v1.texto+"\n"+v1.Verdaderas+"\n";
				RESULT.texto+=v2+"\ngoto L"+l+"\n"+v1.Falsas+"\n";RESULT.Falsas="L"+l+":\n";l++;
				
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("LISTELSE",14, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LISTELSE ::= LISTELSE ELSE BLOQUE 
            {
              Logica RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).right;
		Logica v1 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=new Logica();RESULT.texto=v1.texto+""+v2+"\n"+v1.Falsas;RESULT.Falsas="";
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("LISTELSE",14, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LISTELSE ::= LISTELSE ELSEIF PA Exp PC THEN BLOQUE 
            {
              Logica RESULT =null;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-6)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-6)).right;
		Logica v3 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-6)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).right;
		Logica v1 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=new Logica();
				RESULT.texto=v3.texto+"\n";
				RESULT.texto+=v1.texto+"\n"+v1.Verdaderas+"\n";
				RESULT.texto+=v2+"\ngoto L"+l+"\n"+v1.Falsas+"\n"+RESULT.Falsas;
				RESULT.Falsas=v3+"L"+l+":\n";l++;
				
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("LISTELSE",14, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTIFELIF ::= IF PA Exp PC THEN BLOQUE LISTELSE 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).right;
		Logica v1 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		Logica v3 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
	RESULT=v1.texto+"\n"+v1.Verdaderas+"\n";
	RESULT+=v2+"\ngoto L"+l+"\n"+v1.Falsas+"\n"+v3.texto+v3.Falsas+"L"+l+":\n";l++;
	//System.out.println(RESULT);
	
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("SENTIFELIF",33, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTIFEL ::= IF PA Exp PC THEN BLOQUE ELSE BLOQUE 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-5)).right;
		Logica v1 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		

	RESULT=v1.texto+"\n"+v1.Verdaderas+"\n";
	RESULT+=v2+"\ngoto L"+l+"\n"+v1.Falsas+"\n"+v3+"\nL"+l+":\n";l++;
	//System.out.println(RESULT);
	
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("SENTIFEL",32, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTIF ::= IF PA Exp PC THEN BLOQUE 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).right;
		Logica v1 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
			
	RESULT=v1.texto+"\n"+v1.Verdaderas+"\n";
	RESULT+=v2+"\n"+v1.Falsas;
	//System.out.println(RESULT);
	
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("SENTIF",31, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TipoDeDato ::= tbool 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=v1;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("TipoDeDato",28, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TipoDeDato ::= tchar 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=v1;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("TipoDeDato",28, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TipoDeDato ::= tstring 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=v1;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("TipoDeDato",28, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TipoDeDato ::= tint 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=v1;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("TipoDeDato",28, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LLAMADA ::= ID PA PC PUNTOCOMA 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).value;
		
				Simbolo sym=SeekSym(v1);
				RESULT+="P=P="+pos;
				RESULT+="\ncall "+nombreprograma+"_"+v1+"_"+sym.tipo+";\n";
				RESULT+="P=P-"+pos;
				
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("LLAMADA",30, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LLAMADA ::= ID PA LISTEXP PC PUNTOCOMA 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).right;
		Stack<String> v2 = (Stack<String>)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).value;
		
	RESULT=salida;salida="";
	Simbolo sym=SeekSym(v1);
	int ini=0;
	if(sym.rol.equals("funcion"))
	{
		ini=1;
	}
	while(!v2.empty())
	{
		RESULT+="t"+tmp+"=P+"+ini+"\n";
		RESULT+="Stack[t"+tmp+"]="+v2.pop()+"\n";ini++;tmp++;
	}
	RESULT+="P=P+"+pos;
	RESULT+="\ncall "+nombreprograma+"_"+v1+"_"+sym.tipo+";\n";
	RESULT+="P=P-"+pos;


              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("LLAMADA",30, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LISTEXP ::= E 
            {
              Stack<String> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=new Stack<String>();RESULT.push(v1);
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("LISTEXP",2, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LISTEXP ::= LISTEXP COMA E 
            {
              Stack<String> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).right;
		Stack<String> v1 = (Stack<String>)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=v1;RESULT.push(v2);
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("LISTEXP",2, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTRET ::= RETURN PUNTOCOMA 
            {
              String RESULT =null;
		RESULT="RET;";
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("SENTRET",29, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTRET ::= RETURN Exp PUNTOCOMA 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).right;
		Logica v1 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).value;
		
	RESULT="t"+tmp+"=P+0\n";
	RESULT+="Stack[t"+tmp+"]="+v1.texto+"\n";tmp++;
	
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("SENTRET",29, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTPA ::= TipoDeDato DOSPUNTOS ID 
            {
              Simbolo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		pos++;
				RESULT=new Simbolo();
				Simbolo m=new Simbolo();m.id=v2;m.tipo=v1;
				RESULT.Parametros.push(m);
				
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("LISTPA",7, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LISTPA ::= LISTPA COMA TipoDeDato DOSPUNTOS ID 
            {
              Simbolo RESULT =null;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).right;
		Simbolo v3 = (Simbolo)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
				RESULT=v3;pos++;
				Simbolo m=new Simbolo();m.id=v2;m.tipo=v1;
				RESULT.Parametros.push(m);
				
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("LISTPA",7, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DFUNC ::= FUNCTION TipoDeDato DOSPUNTOS ID PA PC NT$7 LISTDECLA NT$8 BLOQUE 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).value;
		int v0left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-8)).left;
		int v0right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-8)).right;
		String v0 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-8)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-6)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-6)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
	salida+=nombreprograma+"_"+v1+"_"+v0+"() {\n"+v3+"}\n";
	

              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("DFUNC",27, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$8 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).value;
		int v0left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-6)).left;
		int v0right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-6)).right;
		String v0 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-6)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).value;

			Simbolo v2=new Simbolo();
	v2.id=v1;v2.tam=pos;v2.tipo=v0;v2.rol="funcion";
	Tabla_Simbolos.add(v2);
	
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("NT$8",48, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$7 ::= 
            {
              String RESULT =null;
		int v0left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).left;
		int v0right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).right;
		String v0 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).value;
pos=1; amb=v1;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("NT$7",47, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DFUNC ::= FUNCTION TipoDeDato DOSPUNTOS ID PA NT$5 LISTPA PC LISTDECLA NT$6 BLOQUE 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).value;
		int v0left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-9)).left;
		int v0right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-9)).right;
		String v0 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-9)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-7)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-7)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-7)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).right;
		Simbolo v2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
	salida+=nombreprograma+"_"+v1+"_"+v0+"() {\n"+v3+"\n}\n";
	

              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("DFUNC",27, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$6 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).value;
		int v0left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-7)).left;
		int v0right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-7)).right;
		String v0 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-7)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-5)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).right;
		Simbolo v2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).value;

	v2.id=v1;v2.tam=pos;v2.tipo=v0;v2.rol="funcion";
	Tabla_Simbolos.add(v2);
	
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("NT$6",46, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$5 ::= 
            {
              String RESULT =null;
		int v0left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).left;
		int v0right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).right;
		String v0 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).value;
pos=1; amb=v1;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("NT$5",45, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DPROC ::= PROCEDURE ID PA PC NT$3 LISTDECLA NT$4 BLOQUE 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-6)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-6)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
	salida+=nombreprograma+"_"+v1+"_"+"void() {\n"+v3+"\n}\n";

              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("DPROC",26, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$4 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).value;

			Simbolo v2=new Simbolo();
	v2.id=v1;v2.tam=pos;v2.tipo="void";v2.rol="procedimiento";
	Tabla_Simbolos.add(v2);
			
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("NT$4",44, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$3 ::= 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).value;
pos=0; amb=v1;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("NT$3",43, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DPROC ::= PROCEDURE ID PA NT$1 LISTPA PC LISTDECLA NT$2 BLOQUE 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-7)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-7)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-7)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).right;
		Simbolo v2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
	salida+=nombreprograma+"_"+v1+"_"+"void() {\n"+v3+"\n}\n";
	

              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("DPROC",26, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$2 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-5)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).right;
		Simbolo v2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).value;

	v2.id=v1;v2.tam=pos;v2.tipo="void";v2.rol="procedimiento";
	Tabla_Simbolos.add(v2);
	
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("NT$2",42, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$1 ::= 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).value;
pos =0;amb=v1;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("NT$1",41, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTID ::= ID 
            {
              Stack<String> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=new Stack<String>();RESULT.push(v1);
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("LISTID",3, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTID ::= LISTID COMA ID 
            {
              Stack<String> RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).right;
		Stack<String> v2 = (Stack<String>)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=v2;RESULT.push(v1);
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("LISTID",3, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTDECLA ::= 
            {
              Object RESULT =null;

              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("LISTDECLA",1, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTDECLA ::= LISTDECLA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("LISTDECLA",1, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LIMIT ::= E PUNTO PUNTO E 
            {
              Simbolo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
	RESULT=new Simbolo();RESULT.dim=1;RESULT.rol="arreglo";
	int a =Integer.parseInt(v1);
	RESULT.inferiores.add(Integer.parseInt(v1));
	RESULT.superiores.add(Integer.parseInt(v2));

              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("LIMIT",8, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LIMIT ::= E 
            {
              Simbolo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
	RESULT=new Simbolo();RESULT.dim=1;
	RESULT.inferiores.add(0);RESULT.rol="arreglo";
	RESULT.superiores.add(Integer.parseInt(v1));
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("LIMIT",8, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTDIME ::= COAB LIMIT COCI 
            {
              Simbolo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).right;
		Simbolo v1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).value;
		
RESULT=v1;

              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("LISTDIME",9, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTDIME ::= LISTDIME COAB LIMIT COCI 
            {
              Simbolo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).right;
		Simbolo v1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).right;
		Simbolo v2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).value;
		
	RESULT=v1;RESULT.inferiores.add(v2.inferiores.get(0));RESULT.dim++;
	RESULT.superiores.add(v2.superiores.get(0));


              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("LISTDIME",9, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= VAR TipoDeDato DOSPUNTOS LISTID PUNTOCOMA 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).right;
		Stack<String> v2 = (Stack<String>)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).value;
		
				while(v2.empty())
				{
					String idd=v2.pop();
					Tabla_Simbolos.add(new Simbolo(idd,pos,amb,"variable",v1,""));pos++;
					if(amb.equals("global"))
					{
						salida+=v1+" "+idd+";";
					}
				}
					
			
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("DECLARACION",25, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= VAR ID OF TipoDeDato LISTDIME PUNTOCOMA 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).right;
		Simbolo v3 = (Simbolo)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).value;
		
	int tam=1;
	for(int i=0;i<v3.inferiores.size();i++)
	{
		tam=(v3.superiores.get(i)-v3.inferiores.get(i))*tam;
	}
	v3.tam=tam;
	v3.id=v1;v3.tipo=v2;v3.ambito=amb;v3.pos=pos;Tabla_Simbolos.add(v3);
	//System.out.println(v3.tam);
	pos=pos+v3.tam;

              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("DECLARACION",25, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTDIM ::= COAB E COCI 
            {
              Simbolo RESULT =null;

              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("LISTDIM",10, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTDIM ::= LISTDIM COAB E COCI 
            {
              Simbolo RESULT =null;

              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("LISTDIM",10, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ASIGNACION ::= ID DOSIGUAL Exp PUNTOCOMA 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).right;
		Logica v2 = (Logica)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).value;
		
				int a=BuscarSimbolo(v1);
				if(a>-1)
				{
					RESULT="t"+tmp+"=P+"+a+"\n";
					RESULT+="Stack[t"+tmp+"]="+v2.texto+"\n";
					//System.out.println(salida);
					//System.out.println(RESULT);
				}
				else if(a==-2)
				{
					RESULT=v1+"="+v2;
				}
				
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ASIGNACION ::= ID LISTDIM DOSIGUAL Exp PUNTOCOMA 
            {
              String RESULT =null;

              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIAS ::= SENTENCIA 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=v1;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",20, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		RESULT=v1+"\n"+v2;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",20, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BLOQUE ::= BEGIN END 
            {
              String RESULT =null;
		RESULT="";
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BLOQUE ::= BEGIN SENTENCIAS END 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).value;
		RESULT=v1;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MAIN ::= TMAIN BLOQUE 
            {
              String RESULT =null;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
		
	salida=nombreprograma+"_main_"+"void() {\n"+v3+"\n}\n";
	System.out.println(salida);
	
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("MAIN",37, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MET ::= MAIN 
            {
              String RESULT =null;

              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("MET",38, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MET ::= DFUNC 
            {
              String RESULT =null;

              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("MET",38, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MET ::= DPROC 
            {
              String RESULT =null;

              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("MET",38, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTMET ::= MET 
            {
              String RESULT =null;

              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("LISTMET",39, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTMET ::= LISTMET MET 
            {
              String RESULT =null;

              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("LISTMET",39, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S0 ::= PROGRAM ID NT$0 DOSPUNTOS LISTDECLA LISTMET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-4)).value;

              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.peek()).value;
nombreprograma=v1;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          return CUP$Sintactico_Config$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico_Config$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.elementAt(CUP$Sintactico_Config$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_Config$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico_Config$parser.done_parsing();
          return CUP$Sintactico_Config$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

