/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Calculator_H
#define Calculator_H

#include <thrift/TDispatchProcessor.h>
#include "tutorial_types.h"

namespace tutorial {

class CalculatorIf {
 public:
  virtual ~CalculatorIf() {}
  virtual int32_t Solicitud(const int32_t sol) = 0;
  virtual void Generar3D(std::string& _return, const std::string& alto) = 0;
  virtual void ping() = 0;
};

class CalculatorIfFactory {
 public:
  typedef CalculatorIf Handler;

  virtual ~CalculatorIfFactory() {}

  virtual CalculatorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CalculatorIf* /* handler */) = 0;
};

class CalculatorIfSingletonFactory : virtual public CalculatorIfFactory {
 public:
  CalculatorIfSingletonFactory(const boost::shared_ptr<CalculatorIf>& iface) : iface_(iface) {}
  virtual ~CalculatorIfSingletonFactory() {}

  virtual CalculatorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CalculatorIf* /* handler */) {}

 protected:
  boost::shared_ptr<CalculatorIf> iface_;
};

class CalculatorNull : virtual public CalculatorIf {
 public:
  virtual ~CalculatorNull() {}
  int32_t Solicitud(const int32_t /* sol */) {
    int32_t _return = 0;
    return _return;
  }
  void Generar3D(std::string& /* _return */, const std::string& /* alto */) {
    return;
  }
  void ping() {
    return;
  }
};

typedef struct _Calculator_Solicitud_args__isset {
  _Calculator_Solicitud_args__isset() : sol(false) {}
  bool sol;
} _Calculator_Solicitud_args__isset;

class Calculator_Solicitud_args {
 public:

  Calculator_Solicitud_args() : sol(0) {
  }

  virtual ~Calculator_Solicitud_args() throw() {}

  int32_t sol;

  _Calculator_Solicitud_args__isset __isset;

  void __set_sol(const int32_t val) {
    sol = val;
  }

  bool operator == (const Calculator_Solicitud_args & rhs) const
  {
    if (!(sol == rhs.sol))
      return false;
    return true;
  }
  bool operator != (const Calculator_Solicitud_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_Solicitud_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_Solicitud_pargs {
 public:


  virtual ~Calculator_Solicitud_pargs() throw() {}

  const int32_t* sol;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_Solicitud_result__isset {
  _Calculator_Solicitud_result__isset() : success(false) {}
  bool success;
} _Calculator_Solicitud_result__isset;

class Calculator_Solicitud_result {
 public:

  Calculator_Solicitud_result() : success(0) {
  }

  virtual ~Calculator_Solicitud_result() throw() {}

  int32_t success;

  _Calculator_Solicitud_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Calculator_Solicitud_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculator_Solicitud_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_Solicitud_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_Solicitud_presult__isset {
  _Calculator_Solicitud_presult__isset() : success(false) {}
  bool success;
} _Calculator_Solicitud_presult__isset;

class Calculator_Solicitud_presult {
 public:


  virtual ~Calculator_Solicitud_presult() throw() {}

  int32_t* success;

  _Calculator_Solicitud_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculator_Generar3D_args__isset {
  _Calculator_Generar3D_args__isset() : alto(false) {}
  bool alto;
} _Calculator_Generar3D_args__isset;

class Calculator_Generar3D_args {
 public:

  Calculator_Generar3D_args() : alto() {
  }

  virtual ~Calculator_Generar3D_args() throw() {}

  std::string alto;

  _Calculator_Generar3D_args__isset __isset;

  void __set_alto(const std::string& val) {
    alto = val;
  }

  bool operator == (const Calculator_Generar3D_args & rhs) const
  {
    if (!(alto == rhs.alto))
      return false;
    return true;
  }
  bool operator != (const Calculator_Generar3D_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_Generar3D_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_Generar3D_pargs {
 public:


  virtual ~Calculator_Generar3D_pargs() throw() {}

  const std::string* alto;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_Generar3D_result__isset {
  _Calculator_Generar3D_result__isset() : success(false) {}
  bool success;
} _Calculator_Generar3D_result__isset;

class Calculator_Generar3D_result {
 public:

  Calculator_Generar3D_result() : success() {
  }

  virtual ~Calculator_Generar3D_result() throw() {}

  std::string success;

  _Calculator_Generar3D_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Calculator_Generar3D_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculator_Generar3D_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_Generar3D_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_Generar3D_presult__isset {
  _Calculator_Generar3D_presult__isset() : success(false) {}
  bool success;
} _Calculator_Generar3D_presult__isset;

class Calculator_Generar3D_presult {
 public:


  virtual ~Calculator_Generar3D_presult() throw() {}

  std::string* success;

  _Calculator_Generar3D_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Calculator_ping_args {
 public:

  Calculator_ping_args() {
  }

  virtual ~Calculator_ping_args() throw() {}


  bool operator == (const Calculator_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Calculator_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_ping_pargs {
 public:


  virtual ~Calculator_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_ping_result {
 public:

  Calculator_ping_result() {
  }

  virtual ~Calculator_ping_result() throw() {}


  bool operator == (const Calculator_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Calculator_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_ping_presult {
 public:


  virtual ~Calculator_ping_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CalculatorClient : virtual public CalculatorIf {
 public:
  CalculatorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  CalculatorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t Solicitud(const int32_t sol);
  void send_Solicitud(const int32_t sol);
  int32_t recv_Solicitud();
  void Generar3D(std::string& _return, const std::string& alto);
  void send_Generar3D(const std::string& alto);
  void recv_Generar3D(std::string& _return);
  void ping();
  void send_ping();
  void recv_ping();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CalculatorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CalculatorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CalculatorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Solicitud(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Generar3D(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CalculatorProcessor(boost::shared_ptr<CalculatorIf> iface) :
    iface_(iface) {
    processMap_["Solicitud"] = &CalculatorProcessor::process_Solicitud;
    processMap_["Generar3D"] = &CalculatorProcessor::process_Generar3D;
    processMap_["ping"] = &CalculatorProcessor::process_ping;
  }

  virtual ~CalculatorProcessor() {}
};

class CalculatorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CalculatorProcessorFactory(const ::boost::shared_ptr< CalculatorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CalculatorIfFactory > handlerFactory_;
};

class CalculatorMultiface : virtual public CalculatorIf {
 public:
  CalculatorMultiface(std::vector<boost::shared_ptr<CalculatorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CalculatorMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CalculatorIf> > ifaces_;
  CalculatorMultiface() {}
  void add(boost::shared_ptr<CalculatorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t Solicitud(const int32_t sol) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Solicitud(sol);
    }
    return ifaces_[i]->Solicitud(sol);
  }

  void Generar3D(std::string& _return, const std::string& alto) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Generar3D(_return, alto);
    }
    ifaces_[i]->Generar3D(_return, alto);
    return;
  }

  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

};

} // namespace

#endif
